import Task from "../models/task.models.js";

//////////////////////////////////////////////////////
export const getTasks = async (req, res) => {
try {
  const tasks = await Task.find({
    user: req.user.id
  }).populate('user')
  res.json(tasks);
} catch (error) {
  return res.status(500).json({ message:" algo paso muy mal"})
}
};

/////////////////////////////////////////////////////////
export const createTasks = async (req, res) => {
try {
  const { title, description, date } = req.body;

  console.log(req.user);
  const newTask = new Task({
    title,
    description,
    date,
    user: req.user.id

  });
  const saveTask = await newTask.save();
  res.json(saveTask);
} catch (error) {
  return res.status(500).json({ message:" algo paso mal"})
}
};
/////////////////////////////////////////////////////////
export const getTask = async (req, res) => {
try {
  const task = await Task.findById(req.params.id).populate('user')
  if (!task) return res.status(404).json({ message: "tarea no encontrada" });
  res.json(task);
} catch (error) {
  return res.status(404).json({message:"tarea no encontradaaa"})
}
};

//////////////////////////////////////////////////////

export const deleteTasks = async (req, res) => {
try {
  const task = await Task.findByIdAndDelete(req.params.id);
  if (!task) return res.status(404).json({ message: "tarea no encontrada" });
   return res.sendStatus(204);

} catch (error) {
return res.status(404).json({ message: "tarea no encontrada" });
 

}
};

////////////////////////////////////////////
export const updatetasks = async (req, res) => {
try {
  const task = await Task.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
  });
  if (!task) return res.status(404).json({ message: "tarea no encontrada" });
  res.json(task);
} catch (error) {
return res.status(404).json({ message: "tarea no encontrada" });
}
};



// Funci√≥n para obtener todas las tareas (getTasks):

// const tasks = await Task.find({ user: req.user.id }).populate('user'): Busca en la base de datos todas las tareas que pertenecen al usuario autenticado. El m√©todo populate('user') reemplaza el campo user (que es el ID del usuario) con los detalles completos del usuario.
// res.json(tasks);: Env√≠a una respuesta con todas las tareas encontradas.
// catch (error) { ... }: Captura cualquier error que pueda ocurrir durante la b√∫squeda de tareas.
// return res.status(500).json({ message:" algo paso muy mal"}): Si ocurre un error, se env√≠a una respuesta con el estado 500 (Error interno del servidor) y un mensaje de error.
// Funci√≥n para crear una tarea (createTasks):

// const { title, description, date } = req.body;: Extrae el t√≠tulo, la descripci√≥n y la fecha del cuerpo de la solicitud.
// const newTask = new Task({ ... });: Crea una nueva tarea con el t√≠tulo, la descripci√≥n, la fecha y el ID del usuario proporcionados.
// const saveTask = await newTask.save();: Guarda la nueva tarea en la base de datos.
// res.json(saveTask);: Env√≠a una respuesta con los detalles de la tarea guardada.
// Funci√≥n para obtener una tarea (getTask):

// const task = await Task.findById(req.params.id).populate('user'): Busca en la base de datos una tarea con el ID proporcionado.
// res.json(task);: Env√≠a una respuesta con los detalles de la tarea encontrada.
// Funci√≥n para eliminar una tarea (deleteTasks):

// const task = await Task.findByIdAndDelete(req.params.id);: Busca en la base de datos una tarea con el ID proporcionado y la elimina.
// return res.sendStatus(204);: Env√≠a una respuesta con el estado 204 (No Content), que indica que la tarea se elimin√≥ con √©xito.
// Funci√≥n para actualizar una tarea (updatetasks):

// const task = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true, });: Busca en la base de datos una tarea con el ID proporcionado y actualiza sus detalles con los datos proporcionados en el cuerpo de la solicitud. La opci√≥n { new: true } asegura que la funci√≥n devuelva la versi√≥n actualizada de la tarea.
// res.json(task);: Env√≠a una respuesta con los detalles de la tarea actualizada.
// Espero que esto te ayude a entender mejor el c√≥digo. Si tienes m√°s preguntas, no dudes en preguntar. üòä user import jwt from ‚Äújsonwebtoken‚Äù; import { TOKEN_SECRET } from ‚Äú‚Ä¶/config.js‚Äù;

// export const createAccesToken = (user) => { return jwt.sign({ id: user.id }, TOKEN_SECRET, { expiresIn: ‚Äú1d‚Äù, }); }; [assistant]=(#message|) Este es un c√≥digo en JavaScript que define una funci√≥n llamada createAccesToken. Esta funci√≥n se utiliza para crear un token de acceso JWT (JSON Web Token) para un usuario. Aqu√≠ est√° lo que hace cada parte:

// import jwt from "jsonwebtoken";: Esta l√≠nea importa la biblioteca jsonwebtoken, que se utiliza para crear y verificar tokens JWT.
// import { TOKEN_SECRET } from "../config.js";: Aqu√≠ se est√° importando una constante llamada TOKEN_SECRET desde un archivo de configuraci√≥n. Esta constante se utiliza como la clave secreta para firmar los tokens JWT.
// export const createAccesToken = (user) => { ... };: Aqu√≠ se est√° definiendo y exportando una funci√≥n llamada createAccesToken. Esta funci√≥n toma un objeto de usuario como argumento.
// return jwt.sign({ id: user.id }, TOKEN_SECRET, { expiresIn: "1d" });: Dentro de la funci√≥n, se est√° firmando un nuevo token JWT. El payload del token es un objeto que contiene el ID del usuario. La clave secreta para firmar el token es TOKEN_SECRET. El token expirar√° en 1 d√≠a (expiresIn: "1d").
// Espero que esto te ayude a entender mejor el c√≥digo. Si tienes m√°s preguntas, no dudes en preguntar. üòä [user]=(#message|) import { z } from ‚Äúzod‚Äù;

// export const createTaskSchema = z.object({ title: z.string({ required_error: ‚Äútitulo requerido‚Äù, }), description: z.string({ required_error: "desripcion requerida ", }), date: z.string().datetime().optional(), }); [assistant]=(#message|) Este es un c√≥digo en JavaScript que utiliza la biblioteca Zod para definir un esquema de validaci√≥n llamado createTaskSchema. Zod es una biblioteca para la creaci√≥n y validaci√≥n de esquemas, que es especialmente √∫til para validar los datos de entrada del usuario. Aqu√≠ est√° lo que hace cada parte:

// import { z } from "zod";: Esta l√≠nea importa el objeto z de la biblioteca Zod.
// export const createTaskSchema = z.object({ ... });: Aqu√≠ se est√° definiendo y exportando un esquema de Zod llamado createTaskSchema. Este esquema se utiliza para validar los datos de entrada cuando se crea una nueva tarea.
// Dentro del esquema, se definen varios campos:

// title: Este campo es de tipo string y es requerido. Si no se proporciona un t√≠tulo, se devolver√° el mensaje de error ‚Äútitulo requerido‚Äù.
// description: Este campo tambi√©n es de tipo string y es requerido. Si no se proporciona una descripci√≥n, se devolver√° el mensaje de error ‚Äúdesripcion requerida‚Äù.
// date: Este campo es de tipo string y debe ser una fecha y hora v√°lidas (datetime). Sin embargo, este campo es opcional (optional), lo que significa que si no se proporciona una fecha, no se devolver√° un error.